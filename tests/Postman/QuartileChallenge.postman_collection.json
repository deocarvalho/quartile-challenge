{
  "info": {
    "name": "Quartile Store API",
    "description": "Collection for testing the Quartile Store API and Product Functions",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Store API",
      "item": [
        {
          "name": "Get All Stores",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/stores",
              "host": [ "{{baseUrl}}" ],
              "path": [ "api", "stores" ]
            }
          }
        },
        {
          "name": "Get Store by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Store has correct ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.eql(pm.variables.get(\"storeId\"));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/stores/{{storeId}}",
              "host": [ "{{baseUrl}}" ],
              "path": [ "api", "stores", "{{storeId}}" ]
            }
          }
        },
        {
          "name": "Get Stores by Company ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"All stores belong to company\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    jsonData.forEach(function(store) {",
                  "        pm.expect(store.companyId).to.eql(pm.variables.get(\"companyId\"));",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/stores/company/{{companyId}}",
              "host": [ "{{baseUrl}}" ],
              "path": [ "api", "stores", "company", "{{companyId}}" ]
            }
          }
        },
        {
          "name": "Create Store",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Store is created with correct data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.eql(pm.variables.get(\"storeName\"));",
                  "    pm.expect(jsonData.location).to.eql(pm.variables.get(\"storeLocation\"));",
                  "    pm.environment.set(\"storeId\", jsonData.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{storeName}}\",\n    \"location\": \"{{storeLocation}}\",\n    \"companyId\": \"{{companyId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/stores",
              "host": [ "{{baseUrl}}" ],
              "path": [ "api", "stores" ]
            }
          }
        },
        {
          "name": "Update Store",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Store is updated with correct data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.eql(pm.variables.get(\"updatedStoreName\"));",
                  "    pm.expect(jsonData.location).to.eql(pm.variables.get(\"updatedStoreLocation\"));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{updatedStoreName}}\",\n    \"location\": \"{{updatedStoreLocation}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/stores/{{storeId}}",
              "host": [ "{{baseUrl}}" ],
              "path": [ "api", "stores", "{{storeId}}" ]
            }
          }
        },
        {
          "name": "Delete Store",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/stores/{{storeId}}",
              "host": [ "{{baseUrl}}" ],
              "path": [ "api", "stores", "{{storeId}}" ]
            }
          }
        }
      ]
    },
    {
      "name": "Products",
      "item": [
        {
          "name": "Get Products by Store ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "const start = new Date().getTime();",
                  "",
                  "pm.test(\"Response time is less than 1000ms\", function () {",
                  "    const end = new Date().getTime();",
                  "    pm.expect(end - start).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test(\"All products belong to store\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    jsonData.forEach(function(product) {",
                  "        pm.expect(product.storeId).to.eql(pm.variables.get(\"storeId\"));",
                  "    });",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/products/store/{{storeId}}",
              "host": [ "{{baseUrl}}" ],
              "path": [ "api", "products", "store", "{{storeId}}" ]
            }
          }
        },
        {
          "name": "Get All Products",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": [ "{{baseUrl}}" ],
              "path": [ "api", "products" ]
            }
          }
        },
        {
          "name": "Get Product by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Product has correct ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.eql(pm.variables.get(\"productId\"));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": [ "{{baseUrl}}" ],
              "path": [ "api", "products", "{{productId}}" ]
            }
          }
        },
        {
          "name": "Create Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Product is created with correct data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.eql(pm.variables.get(\"productName\"));",
                  "    pm.expect(jsonData.description).to.eql(pm.variables.get(\"productDescription\"));",
                  "    pm.expect(jsonData.price).to.eql(Number(pm.variables.get(\"productPrice\")));",
                  "    pm.environment.set(\"productId\", jsonData.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{productName}}\",\n    \"description\": \"{{productDescription}}\",\n    \"price\": {{productPrice}},\n    \"storeId\": \"{{storeId}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/products",
              "host": [ "{{baseUrl}}" ],
              "path": [ "api", "products" ]
            }
          }
        },
        {
          "name": "Update Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Product is updated with correct data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.eql(pm.variables.get(\"updatedProductName\"));",
                  "    pm.expect(jsonData.description).to.eql(pm.variables.get(\"updatedProductDescription\"));",
                  "    pm.expect(jsonData.price).to.eql(Number(pm.variables.get(\"updatedProductPrice\")));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{updatedProductName}}\",\n    \"description\": \"{{updatedProductDescription}}\",\n    \"price\": {{updatedProductPrice}}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": [ "{{baseUrl}}" ],
              "path": [ "api", "products", "{{productId}}" ]
            }
          }
        },
        {
          "name": "Delete Product",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/products/{{productId}}",
              "host": [ "{{baseUrl}}" ],
              "path": [ "api", "products", "{{productId}}" ]
            }
          }
        }
      ]
    }
  ]
}